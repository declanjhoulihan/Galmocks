###Twisst Analysis###
#Using scripts from Simon H. Martin (https://github.com/simonhmartin/twisst and https://github.com/simonhmartin/genomics_general)

'''{bash}

#Running Twisst analysis by islands with only 8 of 11 islands retained

#Make file for indvs to keep
cat > TwisstRun1.txt
D_001
D_002
D_013
FG03
FG07
FG09
FG15
FG17
FG23
F_272
F_276
F_280
I_364
I_380
P_001
P_016
P_017
SCbal03
SCbal09
SK03
SK04
SK09
SK13
SK22
SK25
SK28
SK35
W_001
W_009
W_025
L_001
L_002
L_003
#use ^d to exit

#Subset the vcf to include only our individuals of interest for each Twisst run
vcftools --gzvcf FilteredNeutralome10kbWindowWithOutgroup.vcf.gz --out TwisstIslands1 --recode --recode-INFO-all --keep TwisstRun1.txt --non-ref-ac-any 1

#Rename outgroup samples so phyml recognizes them as outgroups by adding *
#First, create file with new names
cat > samplesTorename.txt
L_001 L_001*
L_002 L_002*
L_003 L_003*
#use ^d to end file

#Then, run in bcftools
bcftools reheader -s samplesTorename.txt -o TwisstIslandsOutgroupRenamed.vcf TwisstIslands1.recode.vcf

#Convert to geno file
python3 parseVCF.py -i TwisstIslandsOutgroupRenamed.vcf --skipIndels | gzip > Islands1twisst.geno.gz

#Run phyml to make sliding windows - this time with 100 SNP window
python3 phyml_sliding_windows.py -g Islands1twisst.geno.gz --prefix output.islands1phyml_bioml.w100 -T 40 -w 100 --windType sites --model GTR --phyml /programs/phyml/bin/phyml -Mi 10 --outgroup L_001*,L_002*,L_003*

#Make a groups file
cat > GroupsIslands1.txt
D_001_A    Darwin
D_002_A    Darwin
D_013_A    Darwin
FG03_A    Gardner
FG07_A    Gardner
FG09_A    Gardner
FG15_A    Gardner
FG17_A    Gardner
FG23_A    Gardner
F_272_A    Gardner
F_276_A    Gardner
F_280_A    Gardner
I_364_A    Isabela
I_380_A    Isabela
L_001*_A    Outgroup
L_002*_A    Outgroup
L_003*_A    Outgroup
P_001_A    Pinta
P_016_A    Pinta
P_017_A    Pinta
SCbal03_A    SanCristobal
SCbal09_A    SanCristobal
SK03_A    SanCristobal
SK04_A    SanCristobal
SK09_A    Genovesa
SK13_A    Genovesa
SK22_A    Genovesa
SK25_A    Genovesa
SK28_A    Genovesa
SK35_A    Genovesa
W_001_A    Wolf
W_009_A    Wolf
W_025_A    Wolf
D_001_B    Darwin
D_002_B    Darwin
D_013_B    Darwin
FG03_B    Gardner
FG07_B    Gardner
FG09_B    Gardner
FG15_B    Gardner
FG17_B    Gardner
FG23_B    Gardner
F_272_B    Gardner
F_276_B    Gardner
F_280_B    Gardner
I_364_B    Isabela
I_380_B    Isabela
L_001*_B    Outgroup
L_002*_B    Outgroup
L_003*_B    Outgroup
P_001_B    Pinta
P_016_B    Pinta
P_017_B    Pinta
SCbal03_B    SanCristobal
SCbal09_B    SanCristobal
SK03_B    SanCristobal
SK04_B    SanCristobal
SK09_B    Genovesa
SK13_B    Genovesa
SK22_B    Genovesa
SK25_B    Genovesa
SK28_B    Genovesa
SK35_B    Genovesa
W_001_B    Wolf
W_009_B    Wolf
W_025_B    Wolf

#Run the Twisst script - this only allows up to 8 populations
python twisst.py -t output.islands1phyml_bioml.w100.trees.gz -w outputislands1.weights100.csv.gz --outputTopos islands1topologies100.trees -g Darwin -g Gardner -g Isabela -g Outgroup  -g Pinta -g SanCristobal -g Genovesa -g Wolf --method complete --groupsFile GroupsIslands1.txt --verbose --outgroup Outgroup

'''

###Plotting Twisst Results###

#Based on the plotting script provided with Twisst from Simon H. Martin (https://github.com/simonhmartin/twisst/blob/master/example_plot.R)
###Plotting Twisst Results###

rm(list = ls())

library(ape)
library(data.table)
library(tools)
library(ggplot2)
library(cowplot)
library(magick)
library(dplyr)
library(R.utils)

#Load the plotting functions
source("plot_twisst.R")

############################## input files ######################################

# It is possible to import one or more weights files at a time.
# Here we just import 1
#weights file with a column for each topology
weights_file <- "outputislands1.weights100.csv.gz"
#Also read in the weights as a dataframe
weightsdf<-read.csv("outputislands1.weights100.csv.gz", header = F)
# It is not necessary to import window data files, but if you do there should be one for
# each weights file

#coordinates file for each window
window_data_file <- "output.islands1phyml_bioml.w100.data.tsv"

################################# import data ##################################

# The function import.twisst reads the weights, window data  files into a list object
# If there are multiple weights files, or a single file with different chromosomes/scaffolds/contigs
# in the window data file, these will be separated when importing.

twisst_data <- import.twisst(weights_files=weights_file,
                             window_data_files=window_data_file)

#Change the island names in the topologies to abbreviations
for (i in 1:length(twisst_data$topos)){
  twisst_data$topos[[i]]$tip.label<-as.character(ifelse(twisst_data$topos[[i]]$tip.label == "Outgroup", 'O',
                                                        ifelse(twisst_data$topos[[i]]$tip.label == "Darwin", 'D',
                                                               ifelse(twisst_data$topos[[i]]$tip.label == "Gardner", 'Ga',
                                                                      ifelse(twisst_data$topos[[i]]$tip.label == "Isabela", 'I',
                                                                             ifelse(twisst_data$topos[[i]]$tip.label == "Pinta", 'P',
                                                                                    ifelse(twisst_data$topos[[i]]$tip.label == "SanCristobal", 'SC',
                                                                                           ifelse(twisst_data$topos[[i]]$tip.label == "Genovesa", 'Ge',
                                                                                                  ifelse(twisst_data$topos[[i]]$tip.label == "Wolf", 'W', 'Other')))))))))
}
  
#################### subset to only the most abundant topologies #################
sum(twisst_data$weights_overall_mean)
#get list of the most abundant topologies (top 10 in this case)
top10_topos <- order(twisst_data$weights_overall_mean, decreasing=T)[1:10]

#subset twisst object for these
twisst_data_top10topos <- subset.twisst.by.topos(twisst_data, top10_topos)
#this can then be used in all the plotting functions.

#Get the weighting values for the top 10 topos
top10weights <- 100*twisst_data_top10topos$weights_overall_mean
top10weights

############################## combined plots ##################################
# there are a functions available to plot both the weightings and the topologies
#a summary plot shows all the topologies and a bar plot of their relative weightings
#with top 10 topos
tiff("Top10Topos.tiff", width = 2200, height = 1500, res = 300)
plot.twisst.summary(twisst_data_top10topos, lwd=3, cex=0.7)
dev.off()

#Make a histogram of the weightings
#First, convert the weights to a df
weightings <- as.data.frame(twisst_data$weights_overall_mean)

#Then rename the column to "Weights"
colnames(weightings)[1] = "Weights"

#Plot with ggplot
WeightsHist<-ggplot(weightings, aes(x = Weights))+
  geom_histogram(binwidth = .000001, color = "black")+
  theme_bw()+
  labs(x = "Topology Weight", y = "Count")

#Put the plots together in cowplot
Topos <- ggdraw()+draw_image("Top10Topos.tiff")
ToposAndWeights <- plot_grid(Topos, WeightsHist, labels = "AUTO", ncol = 1)
ToposAndWeights

tiff("~/galmocks/ToposWeights.tiff", res = 300, height = 2500, width = 2000)
plot_grid(Topos, WeightsHist, labels = "AUTO", ncol = 1)
dev.off()

#Get the number of occurrences of each topo
window<-read.delim(window_data_file, sep = "\t")
weightings<-mutate(weightings, occurrences = round(weightings$Weights*length(window$scaffold)))
#And plot the occurrences, same idea as weightings histogram
ggplot(weightings, aes(x =occurrences))+
  geom_histogram(binwidth = 1, color = "black", fill = "grey")+
  theme_bw()+
  labs(x = "Topology Weight", y = "Count")
  
'''
